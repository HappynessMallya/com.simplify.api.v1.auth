# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    brochures_directory: '%kernel.project_dir%/public/certificates'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\Infrastructure\Symfony\Security\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken']

    App\Application\:
        resource: "../src/Application/**/*Handler/*Handler.php"
        tags: [{name: tactician.handler, typehints: true}]

    infrastructure.event.jwt_created_listener:
        class: App\Infrastructure\Symfony\EventListener\JWTCreatedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    infrastructure.event.authentication_success_listener:
        class: App\Infrastructure\Symfony\EventListener\AddUserDataToPayloadWhenLoginIsSuccess
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    Symfony\Contracts\HttpClient\HttpClientInterface:
        public: true
        alias: http_client

    App\Domain\Services\TraIntegrationService:
        alias: 'App\Infrastructure\Domain\Services\TraIntegrationClient'
        public: true

    App\Domain\Repository\CompanyRepository:
        alias: 'App\Infrastructure\Repository\DoctrineCompanyRepository'
        public: true

    App\Infrastructure\Domain\Services\FileUploaderServiceV1:
        arguments:
            $folderPath: '%brochures_directory%'

    App\Application\Company\CommandHandler\RegisterCompanyToTraHandler:
        tags: [ messenger.message_handler ]

    App\Application\Company\CommandHandler\RequestAuthenticationTraHandler:
        tags: [ messenger.message_handler ]

    App\Application\Company\CommandHandler\VerifyReceiptCodeHandler:
        tags: [ messenger.message_handler ]
